(()=>{"use strict";eval('\n;// CONCATENATED MODULE: ./src/js/Request/RequestData.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass RequestData {\n    static getData(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((url === undefined)) {\n                return JSON;\n            }\n            return yield fetch(url).then(response => response.json());\n        });\n    }\n    ;\n    static getDataIpstack(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield fetch(url).then(response => response.json());\n        });\n    }\n    ;\n    static getDataIpfy(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield fetch(url).then(response => response.json());\n        });\n    }\n    ;\n    static getDataMeteo(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield fetch(url).then(response => response.json());\n        });\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/js/ElementsDisplay/Selector.ts\nclass Selector {\n    static createSelectorOption(value) {\n        const optionElement = document.createElement(\'option\');\n        optionElement.value = value;\n        optionElement.innerHTML = value;\n        return optionElement;\n    }\n    ;\n    static cleanSelect(selectElement) {\n        if (selectElement != null) {\n            while (selectElement.options.length > 0) {\n                selectElement.remove(0);\n            }\n        }\n        else {\n            selectElement = document.createElement(\'select\');\n        }\n        const title = "Liste des villes disponibles";\n        const optionMenu = this.createSelectorOption(title);\n        optionMenu.selected = true;\n        optionMenu.className = "options";\n        selectElement.add(optionMenu);\n        return selectElement;\n    }\n    ;\n    static displayOptionsListCountry(select, options) {\n        if (select != null) {\n            options.map(option => {\n                select.appendChild(this.createSelectorOption(option[1]["Name"]));\n            });\n        }\n        return select;\n    }\n    ;\n    static displayOptionsListCity(select, options, country) {\n        select = this.cleanSelect(select);\n        options.map((option) => {\n            if (option[\'country\'] == country) {\n                select === null || select === void 0 ? void 0 : select.appendChild(this.createSelectorOption(option["name"]));\n            }\n        });\n        return select;\n    }\n    ;\n}\n;\n\n;// CONCATENATED MODULE: ./src/js/Services/SortJsonArray.ts\nclass SortJsonArray {\n    static sortJson(json) {\n        json.sort(function compare(a, b) {\n            if (a.name < b.name)\n                return -1;\n            if (a.name > b.name)\n                return 1;\n            return 0;\n        });\n        return json;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/js/Services/FormatDateTime.ts\nclass FormatDateTime {\n    static getTime(date) {\n        const hours = date.getHours();\n        const minutes = "0" + date.getMinutes();\n        return hours + ":" + minutes.substr(-2);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/js/Services/Capitalize.ts\nclass Capitalize {\n    static capitalize(word) {\n        return word[0].toUpperCase() + word.slice(1);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/js/Meteo.ts\nvar Meteo_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\nclass Meteo {\n    initCountry(selectCountry, url) {\n        return Meteo_awaiter(this, void 0, void 0, function* () {\n            const options = yield RequestData.getData(url);\n            return Selector.displayOptionsListCountry(selectCountry, Object.entries(options));\n        });\n    }\n    ;\n    initCities(url) {\n        return Meteo_awaiter(this, void 0, void 0, function* () {\n            let defaultCities;\n            defaultCities = [{ \'country\': \'France, \', \'geonameid\': 1234, \'name\': \'paris\', \'subcountry\': \'Ile de france\' }];\n            let cities = yield RequestData.getData(url);\n            if (!(cities instanceof Array)) {\n                return defaultCities;\n            }\n            else {\n                SortJsonArray.sortJson(cities);\n                return cities;\n            }\n        });\n    }\n    ;\n    getLocalIp(url) {\n        return Meteo_awaiter(this, void 0, void 0, function* () {\n            const newIP = yield RequestData.getDataIpfy(url);\n            return newIP;\n        });\n    }\n    ;\n    getTownNameByIp(url) {\n        return Meteo_awaiter(this, void 0, void 0, function* () {\n            const searchedTown = yield RequestData.getData(url);\n            return searchedTown;\n        });\n    }\n    ;\n    getTownByInput(input) {\n        if (input != null) {\n            return input.value;\n        }\n        else {\n            return "paris";\n        }\n        ;\n    }\n    ;\n    getUnitsByInput(input) {\n        if (input != null) {\n            return input.value;\n        }\n        else {\n            return "metric";\n        }\n        ;\n    }\n    ;\n    display(meteo, icons, display, town) {\n        const weather = meteo.weather[0];\n        display[\'temperature\'].innerHTML = `${Math.round(meteo.main.temp)}`;\n        display[\'feelsLike\'].innerHTML = `${Math.round(meteo.main.feels_like)}`;\n        display[\'sunrise\'].innerHTML = FormatDateTime.getTime(new Date(meteo.sys.sunrise));\n        display[\'sunset\'].innerHTML = FormatDateTime.getTime(new Date(meteo.sys.sunset));\n        display[\'conditions\'].innerHTML = Capitalize.capitalize(weather.description);\n        display[\'wi-current\'].className = icons[weather.icon];\n        display[\'body\'].className = weather.main;\n        if (town != null) {\n            town.value = meteo.name;\n        }\n    }\n    ;\n    getMeteoByCity(url) {\n        return Meteo_awaiter(this, void 0, void 0, function* () {\n            return yield RequestData.getDataMeteo(url);\n        });\n    }\n    ;\n}\n\n;// CONCATENATED MODULE: ./src/js/app.ts\n\n\nconst ICONS = {\n    "Rain": "wi wi-day-rain",\n    "Clouds": "wi wi-day-cloudy",\n    "Clear": "wi wi-day-clear",\n    "Snow": "wi wi-dqy-snow",\n    "mist": "wi wi-day-fog",\n    "Drizzle": "wi wi-day-sleet",\n    "Fog": "wi wi-day-fog",\n    "01d": "wi wi-day-clear",\n    "01n": "wi wi-night-clear",\n    "02d": "wi wi-day-sunny-overcast",\n    "02n": "wi wi-night-alt-partly-cloudy",\n    "03d": "wi wi-day-cloudy",\n    "03n": "wi wi-night-cloudy",\n    "04d": "wi wi-day-sunny-overcast",\n    "04n": "wi wi-night-alt-partly-cloudy",\n    "09d": "wi wi-day-showers",\n    "09n": "wi wi-night-alt-showers",\n    "10d": "wi wi-day-rain",\n    "10n": "wi wi-night-rain",\n    "11d": "wi wi-day-ligthning",\n    "11n": "wi wi-night-alt-lightning",\n    "13d": "wi wi-day-snow",\n    "13n": "wi wi-night-snow",\n    "50d": "wi wi-day-haze",\n    "50n": "wi wi-night-fog"\n};\nconst COUNTRIES_URL = "https://pkgstore.datahub.io/core/country-list/data_json/data/8c458f2d15d9f2119654b29ede6e45b8/data_json.json";\nconst CITIES_URL = "https://pkgstore.datahub.io/core/world-cities/world-cities_json/data/5b3dd46ad10990bca47b04b4739a02ba/world-cities_json.json";\nconst KEY_OPENWEATHER = "02c478b69cdc3cd2f342270f2b7c85bb";\nlet newTown;\nlet selectCountry;\nlet selectCity;\nlet units;\nlet citiesSelectedByInput;\nselectCountry = document.querySelector(\'select\');\nselectCity = document.querySelector(\'#cities-select\');\nnewTown = document.querySelector(\'#cities-select\');\nunits = document.querySelector(\'#units-select\');\ncitiesSelectedByInput = document.querySelector(\'#town\');\nconst app_elements = {\n    \'temperature\': document.getElementById(\'temperature\'),\n    \'feelsLike\': document.getElementById(\'feelsLike\'),\n    \'sunrise\': document.getElementById(\'sunrise\'),\n    \'sunset\': document.getElementById(\'sunset\'),\n    \'conditions\': document.querySelector(\'#conditions\'),\n    \'wi-current\': document.getElementById(\'wi-current\'),\n    \'body\': document.getElementsByTagName(\'body\')[0]\n};\nlet citiesSelectedByCountry;\nlet city;\nlet tempUnit;\nconst meteo = new Meteo();\nmeteo.initCountry(selectCountry, COUNTRIES_URL).then(result => selectCountry = result);\nmeteo.initCities(CITIES_URL).then(result => citiesSelectedByCountry = result);\ncity = "paris";\ntempUnit = "metrics";\nconst urlOpenWeather = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${KEY_OPENWEATHER}&lang=fr&units=${tempUnit}`;\nmeteo.getMeteoByCity(urlOpenWeather).then(result => meteo.display(result, ICONS, app_elements, citiesSelectedByInput));\ncitiesSelectedByInput === null || citiesSelectedByInput === void 0 ? void 0 : citiesSelectedByInput.addEventListener(\'keydown\', (e) => {\n    if (e.keyCode === 13) {\n        e.preventDefault();\n        city = meteo.getTownByInput(newTown);\n        tempUnit = meteo.getUnitsByInput(units);\n    }\n});\nselectCountry === null || selectCountry === void 0 ? void 0 : selectCountry.addEventListener(\'change\', () => {\n    if (selectCountry != null) {\n        const countrySelected = selectCountry.options[selectCountry.selectedIndex].value;\n        selectCity = Selector.displayOptionsListCity(selectCity, citiesSelectedByCountry, countrySelected);\n    }\n});\nselectCity === null || selectCity === void 0 ? void 0 : selectCity.addEventListener(\'change\', (event) => {\n    if (citiesSelectedByInput != null) {\n        if (event.target != null) {\n            citiesSelectedByInput.value = event.target.value;\n        }\n    }\n    city = meteo.getTownByInput(newTown);\n    tempUnit = meteo.getUnitsByInput(units);\n    const urlOpenWeather = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${KEY_OPENWEATHER}&lang=fr&units=${tempUnit}`;\n    meteo.getMeteoByCity(urlOpenWeather).then(result => meteo.display(result, ICONS, app_elements, citiesSelectedByInput));\n});\nunits === null || units === void 0 ? void 0 : units.addEventListener(\'change\', (event) => {\n    const modeTemp = document.querySelector(\'#unit\');\n    const modeTempFeelsLike = document.querySelector(\'#unit-feelsLike\');\n    if (modeTemp != null && modeTempFeelsLike != null) {\n        if (event.target.value == "imperial") {\n            modeTemp.innerHTML = "F";\n            modeTempFeelsLike.innerHTML = "F";\n        }\n        else if (event.target.value == "metric") {\n            modeTemp.innerHTML = "C";\n            modeTempFeelsLike.innerHTML = "C";\n        }\n        else {\n            modeTemp.innerHTML = "K";\n            modeTempFeelsLike.innerHTML = "K";\n        }\n    }\n    city = meteo.getTownByInput(newTown);\n    tempUnit = meteo.getUnitsByInput(units);\n    const urlOpenWeather = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${KEY_OPENWEATHER}&lang=fr&units=${tempUnit}`;\n    meteo.getMeteoByCity(urlOpenWeather).then(result => meteo.display(result, ICONS, app_elements, citiesSelectedByInput));\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///127\n')})();